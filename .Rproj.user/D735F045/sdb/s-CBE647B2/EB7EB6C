{
    "collab_server" : "",
    "contents" : "\n\n\n##################################################################\n##################################################################\ncodons = c(\"AAA\",\"AAC\",\"AAG\",\"AAT\",\"ACA\",\"ACC\",\"ACG\",\"ACT\",\"AGA\",\"AGC\",\"AGG\",\n           \"AGT\",\"ATA\",\"ATC\",\"ATG\",\"ATT\",\"CAA\",\"CAC\",\"CAG\",\"CAT\",\"CCA\",\"CCC\",\n           \"CCG\",\"CCT\",\"CGA\",\"CGC\",\"CGG\",\"CGT\",\"CTA\",\"CTC\",\"CTG\",\"CTT\",\"GAA\",\n           \"GAC\",\"GAG\",\"GAT\",\"GCA\",\"GCC\",\"GCG\",\"GCT\",\"GGA\",\"GGC\",\"GGG\",\"GGT\",\n           \"GTA\",\"GTC\",\"GTG\",\"GTT\",\"TAA\",\"TAC\",\"TAG\",\"TAT\",\"TCA\",\"TCC\",\"TCG\",\n           \"TCT\",\"TGA\",\"TGC\",\"TGG\",\"TGT\",\"TTA\",\"TTC\",\"TTG\",\"TTT\")\n\ncodons_except_stop = c(\"AAA\",\"AAC\",\"AAG\",\"AAT\",\"ACA\",\"ACC\",\"ACG\",\"ACT\",\"AGA\",\"AGC\",\"AGG\",\n                       \"AGT\",\"ATA\",\"ATC\",\"ATG\",\"ATT\",\"CAA\",\"CAC\",\"CAG\",\"CAT\",\"CCA\",\"CCC\",\n                       \"CCG\",\"CCT\",\"CGA\",\"CGC\",\"CGG\",\"CGT\",\"CTA\",\"CTC\",\"CTG\",\"CTT\",\"GAA\",\n                       \"GAC\",\"GAG\",\"GAT\",\"GCA\",\"GCC\",\"GCG\",\"GCT\",\"GGA\",\"GGC\",\"GGG\",\"GGT\",\n                       \"GTA\",\"GTC\",\"GTG\",\"GTT\",\"TAC\",\"TAT\",\"TCA\",\"TCC\",\"TCG\",\n                       \"TCT\",\"TGC\",\"TGG\",\"TGT\",\"TTA\",\"TTC\",\"TTG\",\"TTT\")\n\nload('~/Desktop/for_metrics_computations/fa_ref')\nload(\"~/Desktop/for_metrics_computations/which_codon_opt\")\nload(\"~/Desktop/for_metrics_computations/W\")\nload(\"~/Desktop/for_metrics_computations/pointers\")\npointers[[21]] = c(49,51,57)\nload('~/Desktop/for_metrics_computations/codon_usage_prob')\nload('~/Desktop/for_metrics_computations/aa_codon_list21')\naa_list18 = c('I','L','V','F','C','A','G','P','T','S','Y','Q','N','H','E','D','K','R')\nka = c(4,2,2,2,2,4,2,3,2,6,1,2,4,2,6,6,4,4,1,2) #codon degeneracy for 20 amino acid\nwis = read.table(\"~/Desktop/for_metrics_computations/output_wi_file.txt\", header = T)\nwis$CodonsList = as.character(wis$CodonsList)\nwis = wis[order(wis$CodonsList),]\nwi = wis$wi\n#wi is the relative adaptiveness for each of the 64 codon computed by software stAIcalc\nindex_for_opt_codon = sapply(1:20, function(x) pointers[[x]][which(fa_ref[[x]] == max(fa_ref[[x]]))])\n\n\n\ngenerate_a_sequence = function(n_codon){\n  if(n_codon <3){\n    stop('number of codons must be greater than or equal to 3')}\n  middle = sample(codons_except_stop, n_codon-2, replace = T)\n  start_middle_end = c('ATG', middle, sample(c('TAG','TAA','TGA'), 1))\n  res = paste(start_middle_end, collapse = '')\n  return(res)\n}\n\ncount_codon = function(input_sequence){\n  input_sequence = toupper(input_sequence)\n  unique_char = sort(unique(strsplit(input_sequence, \"\")[[1]]))\n  if(all(unique_char == c(\"A\", \"C\", \"G\", \"T\")) != T){\n    stop('sequence contains characters other than A, C, G, T')}\n  n = nchar(input_sequence)\n  if(n %%3 != 0){\n    warning('sequence length is not divisible by 3')}\n  tmp = substring(input_sequence, seq(1, n-2, 3), seq(3, n, 3))\n  if(tmp[1] != 'ATG'){\n    warning('first codon is not ATG')}\n  if(all(tmp[length(tmp)] %in% c(\"TAA\", \"TGA\", \"TAG\")) != T){\n    warning('last codon is not stop codon')}\n  return(c(sum(str_count(tmp, pattern = \"AAA\")),\n           sum(str_count(tmp, pattern = \"AAC\")),\n           sum(str_count(tmp, pattern = \"AAG\")),\n           sum(str_count(tmp, pattern = \"AAT\")),\n           sum(str_count(tmp, pattern = \"ACA\")),\n           sum(str_count(tmp, pattern = \"ACC\")),\n           sum(str_count(tmp, pattern = \"ACG\")),\n           sum(str_count(tmp, pattern = \"ACT\")),\n           sum(str_count(tmp, pattern = \"AGA\")),\n           sum(str_count(tmp, pattern = \"AGC\")),\n           sum(str_count(tmp, pattern = \"AGG\")),\n           sum(str_count(tmp, pattern = \"AGT\")),\n           sum(str_count(tmp, pattern = \"ATA\")),\n           sum(str_count(tmp, pattern = \"ATC\")),\n           sum(str_count(tmp, pattern = \"ATG\")),\n           sum(str_count(tmp, pattern = \"ATT\")),\n           sum(str_count(tmp, pattern = \"CAA\")),\n           sum(str_count(tmp, pattern = \"CAC\")),\n           sum(str_count(tmp, pattern = \"CAG\")),\n           sum(str_count(tmp, pattern = \"CAT\")),\n           sum(str_count(tmp, pattern = \"CCA\")),\n           sum(str_count(tmp, pattern = \"CCC\")),\n           sum(str_count(tmp, pattern = \"CCG\")),\n           sum(str_count(tmp, pattern = \"CCT\")),\n           sum(str_count(tmp, pattern = \"CGA\")),\n           sum(str_count(tmp, pattern = \"CGC\")),\n           sum(str_count(tmp, pattern = \"CGG\")),\n           sum(str_count(tmp, pattern = \"CGT\")),\n           sum(str_count(tmp, pattern = \"CTA\")),\n           sum(str_count(tmp, pattern = \"CTC\")),\n           sum(str_count(tmp, pattern = \"CTG\")),\n           sum(str_count(tmp, pattern = \"CTT\")),\n           sum(str_count(tmp, pattern = \"GAA\")),\n           sum(str_count(tmp, pattern = \"GAC\")),\n           sum(str_count(tmp, pattern = \"GAG\")),\n           sum(str_count(tmp, pattern = \"GAT\")),\n           sum(str_count(tmp, pattern = \"GCA\")),\n           sum(str_count(tmp, pattern = \"GCC\")),\n           sum(str_count(tmp, pattern = \"GCG\")),\n           sum(str_count(tmp, pattern = \"GCT\")),\n           sum(str_count(tmp, pattern = \"GGA\")),\n           sum(str_count(tmp, pattern = \"GGC\")),\n           sum(str_count(tmp, pattern = \"GGG\")),\n           sum(str_count(tmp, pattern = \"GGT\")),\n           sum(str_count(tmp, pattern = \"GTA\")),\n           sum(str_count(tmp, pattern = \"GTC\")),\n           sum(str_count(tmp, pattern = \"GTG\")),\n           sum(str_count(tmp, pattern = \"GTT\")),\n           sum(str_count(tmp, pattern = \"TAA\")),\n           sum(str_count(tmp, pattern = \"TAC\")),\n           sum(str_count(tmp, pattern = \"TAG\")),\n           sum(str_count(tmp, pattern = \"TAT\")),\n           sum(str_count(tmp, pattern = \"TCA\")),\n           sum(str_count(tmp, pattern = \"TCC\")),\n           sum(str_count(tmp, pattern = \"TCG\")),\n           sum(str_count(tmp, pattern = \"TCT\")),\n           sum(str_count(tmp, pattern = \"TGA\")),\n           sum(str_count(tmp, pattern = \"TGC\")),\n           sum(str_count(tmp, pattern = \"TGG\")),\n           sum(str_count(tmp, pattern = \"TGT\")),\n           sum(str_count(tmp, pattern = \"TTA\")),\n           sum(str_count(tmp, pattern = \"TTC\")),\n           sum(str_count(tmp, pattern = \"TTG\")),\n           sum(str_count(tmp, pattern = \"TTT\"))\n  ))\n}\n\nsynonymous_usage_ratio = function(input_sequence){\n  codon_counts = count_codon(input_sequence)\n  res = rep(1,64)\n  res[1] = codon_counts[1]/(codon_counts[1]+codon_counts[3])\n  res[3] = codon_counts[3]/(codon_counts[1]+codon_counts[3])\n\n  res[2] = codon_counts[2]/(codon_counts[2]+codon_counts[4])\n  res[4] = codon_counts[4]/(codon_counts[2]+codon_counts[4])\n\n  res[5] = codon_counts[5]/(codon_counts[5]+codon_counts[6]+codon_counts[7]+codon_counts[8])\n  res[6] = codon_counts[6]/(codon_counts[5]+codon_counts[6]+codon_counts[7]+codon_counts[8])\n  res[7] = codon_counts[7]/(codon_counts[5]+codon_counts[6]+codon_counts[7]+codon_counts[8])\n  res[8] = codon_counts[8]/(codon_counts[5]+codon_counts[6]+codon_counts[7]+codon_counts[8])\n\n  res[9] = codon_counts[9]/(codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27])\n  res[11] = codon_counts[11]/(codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27])\n  res[25] = codon_counts[25]/(codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27])\n  res[26] = codon_counts[26]/(codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27])\n  res[27] = codon_counts[27]/(codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27])\n  res[28] = codon_counts[28]/(codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27])\n\n  res[10] = codon_counts[10]/(codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53])\n  res[12] = codon_counts[12]/(codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53])\n  res[53] = codon_counts[53]/(codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53])\n  res[54] = codon_counts[54]/(codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53])\n  res[55] = codon_counts[55]/(codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53])\n  res[56] = codon_counts[56]/(codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53])\n\n  res[13] = codon_counts[13]/(codon_counts[13]+codon_counts[14]+codon_counts[16])\n  res[14] = codon_counts[14]/(codon_counts[13]+codon_counts[14]+codon_counts[16])\n  res[16] = codon_counts[16]/(codon_counts[13]+codon_counts[14]+codon_counts[16])\n\n  res[17] = codon_counts[17]/(codon_counts[17]+codon_counts[19])\n  res[19] = codon_counts[19]/(codon_counts[17]+codon_counts[19])\n\n  res[29] = codon_counts[29]/(codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63])\n  res[32] = codon_counts[32]/(codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63])\n  res[30] = codon_counts[30]/(codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63])\n  res[31] = codon_counts[31]/(codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63])\n  res[61] = codon_counts[61]/(codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63])\n  res[63] = codon_counts[63]/(codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63])\n\n  res[21] = codon_counts[21]/(codon_counts[21]+codon_counts[23]+codon_counts[22]+codon_counts[24])\n  res[23] = codon_counts[23]/(codon_counts[21]+codon_counts[23]+codon_counts[22]+codon_counts[24])\n  res[22] = codon_counts[22]/(codon_counts[21]+codon_counts[23]+codon_counts[22]+codon_counts[24])\n  res[24] = codon_counts[24]/(codon_counts[21]+codon_counts[23]+codon_counts[22]+codon_counts[24])\n\n  res[18] = codon_counts[18]/(codon_counts[18]+codon_counts[20])\n  res[20] = codon_counts[20]/(codon_counts[18]+codon_counts[20])\n\n  res[33] = codon_counts[33]/(codon_counts[33]+codon_counts[35])\n  res[35] = codon_counts[35]/(codon_counts[33]+codon_counts[35])\n\n  res[34] = codon_counts[34]/(codon_counts[34]+codon_counts[36])\n  res[36] = codon_counts[36]/(codon_counts[34]+codon_counts[36])\n\n  res[37] = codon_counts[37]/(codon_counts[37]+codon_counts[40]+codon_counts[38]+codon_counts[39])\n  res[40] = codon_counts[40]/(codon_counts[37]+codon_counts[40]+codon_counts[38]+codon_counts[39])\n  res[38] = codon_counts[38]/(codon_counts[37]+codon_counts[40]+codon_counts[38]+codon_counts[39])\n  res[39] = codon_counts[39]/(codon_counts[37]+codon_counts[40]+codon_counts[38]+codon_counts[39])\n\n  res[41] = codon_counts[41]/(codon_counts[41]+codon_counts[42]+codon_counts[43]+codon_counts[44])\n  res[42] = codon_counts[42]/(codon_counts[41]+codon_counts[42]+codon_counts[43]+codon_counts[44])\n  res[43] = codon_counts[43]/(codon_counts[41]+codon_counts[42]+codon_counts[43]+codon_counts[44])\n  res[44] = codon_counts[44]/(codon_counts[41]+codon_counts[42]+codon_counts[43]+codon_counts[44])\n\n  res[45] = codon_counts[45]/(codon_counts[45]+codon_counts[46]+codon_counts[47]+codon_counts[48])\n  res[46] = codon_counts[46]/(codon_counts[45]+codon_counts[46]+codon_counts[47]+codon_counts[48])\n  res[47] = codon_counts[47]/(codon_counts[45]+codon_counts[46]+codon_counts[47]+codon_counts[48])\n  res[48] = codon_counts[48]/(codon_counts[45]+codon_counts[46]+codon_counts[47]+codon_counts[48])\n\n  res[49] = codon_counts[49]/(codon_counts[49]+codon_counts[51]+codon_counts[57])\n  res[51] = codon_counts[51]/(codon_counts[49]+codon_counts[51]+codon_counts[57])\n  res[57] = codon_counts[57]/(codon_counts[49]+codon_counts[51]+codon_counts[57])\n\n  res[50] = codon_counts[50]/(codon_counts[50]+codon_counts[52])\n  res[52] = codon_counts[52]/(codon_counts[50]+codon_counts[52])\n\n  res[58] = codon_counts[58]/(codon_counts[58]+codon_counts[60])\n  res[60] = codon_counts[60]/(codon_counts[58]+codon_counts[60])\n\n  res[62] = codon_counts[62]/(codon_counts[62]+codon_counts[64])\n  res[64] = codon_counts[64]/(codon_counts[62]+codon_counts[64])\n\n  res[which(is.na(res) == T)] = 0\n  return(res)\n}\n\ncount_aa = function(input_sequence){\n  codon_counts = count_codon(input_sequence)\n  res = rep(0,64)\n  res[15] = codon_counts[15]\n\n  res[59] = codon_counts[59]\n\n  res[1] = codon_counts[1]+codon_counts[3]\n  res[3] = codon_counts[1]+codon_counts[3]\n\n  res[2] = codon_counts[2]+codon_counts[4]\n  res[4] = codon_counts[2]+codon_counts[4]\n\n  res[5] = codon_counts[5]+codon_counts[6]+codon_counts[7]+codon_counts[8]\n  res[6] = codon_counts[5]+codon_counts[6]+codon_counts[7]+codon_counts[8]\n  res[7] = codon_counts[5]+codon_counts[6]+codon_counts[7]+codon_counts[8]\n  res[8] = codon_counts[5]+codon_counts[6]+codon_counts[7]+codon_counts[8]\n\n  res[9] = codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27]\n  res[11] = codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27]\n  res[25] = codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27]\n  res[26] = codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27]\n  res[27] = codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27]\n  res[28] = codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27]\n\n  res[10] = codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53]\n  res[12] = codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53]\n  res[53] = codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53]\n  res[54] = codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53]\n  res[55] = codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53]\n  res[56] = codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53]\n\n  res[13] = codon_counts[13]+codon_counts[14]+codon_counts[16]\n  res[14] = codon_counts[13]+codon_counts[14]+codon_counts[16]\n  res[16] = codon_counts[13]+codon_counts[14]+codon_counts[16]\n\n  res[17] = codon_counts[17]+codon_counts[19]\n  res[19] = codon_counts[17]+codon_counts[19]\n\n  res[29] = codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63]\n  res[32] = codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63]\n  res[30] = codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63]\n  res[31] = codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63]\n  res[61] = codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63]\n  res[63] = codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63]\n\n  res[21] = codon_counts[21]+codon_counts[23]+codon_counts[22]+codon_counts[24]\n  res[23] = codon_counts[21]+codon_counts[23]+codon_counts[22]+codon_counts[24]\n  res[22] = codon_counts[21]+codon_counts[23]+codon_counts[22]+codon_counts[24]\n  res[24] = codon_counts[21]+codon_counts[23]+codon_counts[22]+codon_counts[24]\n\n  res[18] = codon_counts[18]+codon_counts[20]\n  res[20] = codon_counts[18]+codon_counts[20]\n\n  res[33] = codon_counts[33]+codon_counts[35]\n  res[35] = codon_counts[33]+codon_counts[35]\n\n  res[34] = codon_counts[34]+codon_counts[36]\n  res[36] = codon_counts[34]+codon_counts[36]\n\n  res[37] = codon_counts[37]+codon_counts[40]+codon_counts[38]+codon_counts[39]\n  res[40] = codon_counts[37]+codon_counts[40]+codon_counts[38]+codon_counts[39]\n  res[38] = codon_counts[37]+codon_counts[40]+codon_counts[38]+codon_counts[39]\n  res[39] = codon_counts[37]+codon_counts[40]+codon_counts[38]+codon_counts[39]\n\n  res[41] = codon_counts[41]+codon_counts[42]+codon_counts[43]+codon_counts[44]\n  res[42] = codon_counts[41]+codon_counts[42]+codon_counts[43]+codon_counts[44]\n  res[43] = codon_counts[41]+codon_counts[42]+codon_counts[43]+codon_counts[44]\n  res[44] = codon_counts[41]+codon_counts[42]+codon_counts[43]+codon_counts[44]\n\n  res[45] = codon_counts[45]+codon_counts[46]+codon_counts[47]+codon_counts[48]\n  res[46] = codon_counts[45]+codon_counts[46]+codon_counts[47]+codon_counts[48]\n  res[47] = codon_counts[45]+codon_counts[46]+codon_counts[47]+codon_counts[48]\n  res[48] = codon_counts[45]+codon_counts[46]+codon_counts[47]+codon_counts[48]\n\n  res[49] = codon_counts[49]+codon_counts[51]+codon_counts[57]\n  res[51] = codon_counts[49]+codon_counts[51]+codon_counts[57]\n  res[57] = codon_counts[49]+codon_counts[51]+codon_counts[57]\n\n  res[50] = codon_counts[50]+codon_counts[52]\n  res[52] = codon_counts[50]+codon_counts[52]\n\n  res[58] = codon_counts[58]+codon_counts[60]\n  res[60] = codon_counts[58]+codon_counts[60]\n\n  res[62] = codon_counts[62]+codon_counts[64]\n  res[64] = codon_counts[62]+codon_counts[64]\n\n  return(res)\n} #number of occurrences of aa by codon in a sequence, length of 64\n\ncompute_w = function(input_sequence){\n  codon_counts = count_codon(input_sequence)\n  res = rep(1,64)\n\n  res[15] = 1\n\n  res[59] = 1\n\n  res[1] = codon_counts[1]/max(codon_counts[1],codon_counts[3])\n  res[3] = codon_counts[3]/max(codon_counts[1],codon_counts[3])\n\n  res[2] = codon_counts[2]/max(codon_counts[2],codon_counts[4])\n  res[4] = codon_counts[4]/max(codon_counts[2],codon_counts[4])\n\n  res[5] = codon_counts[5]/max(codon_counts[5],codon_counts[6],codon_counts[7],codon_counts[8])\n  res[6] = codon_counts[6]/max(codon_counts[5],codon_counts[6],codon_counts[7],codon_counts[8])\n  res[7] = codon_counts[7]/max(codon_counts[5],codon_counts[6],codon_counts[7],codon_counts[8])\n  res[8] = codon_counts[8]/max(codon_counts[5],codon_counts[6],codon_counts[7],codon_counts[8])\n\n  res[9] = codon_counts[9]/max(codon_counts[9],codon_counts[11],codon_counts[28],codon_counts[26],codon_counts[25],codon_counts[27])\n  res[11] = codon_counts[11]/max(codon_counts[9],codon_counts[11],codon_counts[28],codon_counts[26],codon_counts[25],codon_counts[27])\n  res[25] = codon_counts[25]/max(codon_counts[9],codon_counts[11],codon_counts[28],codon_counts[26],codon_counts[25],codon_counts[27])\n  res[26] = codon_counts[26]/max(codon_counts[9],codon_counts[11],codon_counts[28],codon_counts[26],codon_counts[25],codon_counts[27])\n  res[27] = codon_counts[27]/max(codon_counts[9],codon_counts[11],codon_counts[28],codon_counts[26],codon_counts[25],codon_counts[27])\n  res[28] = codon_counts[28]/max(codon_counts[9],codon_counts[11],codon_counts[28],codon_counts[26],codon_counts[25],codon_counts[27])\n\n  res[10] = codon_counts[10]/max(codon_counts[10],codon_counts[12],codon_counts[55],codon_counts[56],codon_counts[54],codon_counts[53])\n  res[12] = codon_counts[12]/max(codon_counts[10],codon_counts[12],codon_counts[55],codon_counts[56],codon_counts[54],codon_counts[53])\n  res[53] = codon_counts[53]/max(codon_counts[10],codon_counts[12],codon_counts[55],codon_counts[56],codon_counts[54],codon_counts[53])\n  res[54] = codon_counts[54]/max(codon_counts[10],codon_counts[12],codon_counts[55],codon_counts[56],codon_counts[54],codon_counts[53])\n  res[55] = codon_counts[55]/max(codon_counts[10],codon_counts[12],codon_counts[55],codon_counts[56],codon_counts[54],codon_counts[53])\n  res[56] = codon_counts[56]/max(codon_counts[10],codon_counts[12],codon_counts[55],codon_counts[56],codon_counts[54],codon_counts[53])\n\n  res[13] = codon_counts[13]/max(codon_counts[13],codon_counts[14],codon_counts[16])\n  res[14] = codon_counts[14]/max(codon_counts[13],codon_counts[14],codon_counts[16])\n  res[16] = codon_counts[16]/max(codon_counts[13],codon_counts[14],codon_counts[16])\n\n  res[17] = codon_counts[17]/max(codon_counts[17],codon_counts[19])\n  res[19] = codon_counts[19]/max(codon_counts[17],codon_counts[19])\n\n  res[29] = codon_counts[29]/max(codon_counts[29],codon_counts[32],codon_counts[30],codon_counts[31],codon_counts[61],codon_counts[63])\n  res[32] = codon_counts[32]/max(codon_counts[29],codon_counts[32],codon_counts[30],codon_counts[31],codon_counts[61],codon_counts[63])\n  res[30] = codon_counts[30]/max(codon_counts[29],codon_counts[32],codon_counts[30],codon_counts[31],codon_counts[61],codon_counts[63])\n  res[31] = codon_counts[31]/max(codon_counts[29],codon_counts[32],codon_counts[30],codon_counts[31],codon_counts[61],codon_counts[63])\n  res[61] = codon_counts[61]/max(codon_counts[29],codon_counts[32],codon_counts[30],codon_counts[31],codon_counts[61],codon_counts[63])\n  res[63] = codon_counts[63]/max(codon_counts[29],codon_counts[32],codon_counts[30],codon_counts[31],codon_counts[61],codon_counts[63])\n\n  res[21] = codon_counts[21]/max(codon_counts[21],codon_counts[23],codon_counts[22],codon_counts[24])\n  res[23] = codon_counts[23]/max(codon_counts[21],codon_counts[23],codon_counts[22],codon_counts[24])\n  res[22] = codon_counts[22]/max(codon_counts[21],codon_counts[23],codon_counts[22],codon_counts[24])\n  res[24] = codon_counts[24]/max(codon_counts[21],codon_counts[23],codon_counts[22],codon_counts[24])\n\n  res[18] = codon_counts[18]/max(codon_counts[18],codon_counts[20])\n  res[20] = codon_counts[20]/max(codon_counts[18],codon_counts[20])\n\n  res[33] = codon_counts[33]/max(codon_counts[33],codon_counts[35])\n  res[35] = codon_counts[35]/max(codon_counts[33],codon_counts[35])\n\n  res[34] = codon_counts[34]/max(codon_counts[34],codon_counts[36])\n  res[36] = codon_counts[36]/max(codon_counts[34],codon_counts[36])\n\n  res[37] = codon_counts[37]/max(codon_counts[37],codon_counts[40],codon_counts[38],codon_counts[39])\n  res[40] = codon_counts[40]/max(codon_counts[37],codon_counts[40],codon_counts[38],codon_counts[39])\n  res[38] = codon_counts[38]/max(codon_counts[37],codon_counts[40],codon_counts[38],codon_counts[39])\n  res[39] = codon_counts[39]/max(codon_counts[37],codon_counts[40],codon_counts[38],codon_counts[39])\n\n  res[41] = codon_counts[41]/max(codon_counts[41],codon_counts[42],codon_counts[43],codon_counts[44])\n  res[42] = codon_counts[42]/max(codon_counts[41],codon_counts[42],codon_counts[43],codon_counts[44])\n  res[43] = codon_counts[43]/max(codon_counts[41],codon_counts[42],codon_counts[43],codon_counts[44])\n  res[44] = codon_counts[44]/max(codon_counts[41],codon_counts[42],codon_counts[43],codon_counts[44])\n\n  res[45] = codon_counts[45]/max(codon_counts[45],codon_counts[46],codon_counts[47],codon_counts[48])\n  res[46] = codon_counts[46]/max(codon_counts[45],codon_counts[46],codon_counts[47],codon_counts[48])\n  res[47] = codon_counts[47]/max(codon_counts[45],codon_counts[46],codon_counts[47],codon_counts[48])\n  res[48] = codon_counts[48]/max(codon_counts[45],codon_counts[46],codon_counts[47],codon_counts[48])\n\n  res[49] = codon_counts[49]/max(codon_counts[49],codon_counts[51],codon_counts[57])\n  res[51] = codon_counts[51]/max(codon_counts[49],codon_counts[51],codon_counts[57])\n  res[57] = codon_counts[57]/max(codon_counts[49],codon_counts[51],codon_counts[57])\n\n  res[50] = codon_counts[50]/max(codon_counts[50],codon_counts[52])\n  res[52] = codon_counts[52]/max(codon_counts[50],codon_counts[52])\n\n  res[58] = codon_counts[58]/max(codon_counts[58],codon_counts[60])\n  res[60] = codon_counts[60]/max(codon_counts[58],codon_counts[60])\n\n  res[62] = codon_counts[62]/max(codon_counts[62],codon_counts[64])\n  res[64] = codon_counts[64]/max(codon_counts[62],codon_counts[64])\n\n  return(res)\n}\n\ncalculate_CAI = function(input_sequence, ref_W = W){\n  codon_counts = count_codon(input_sequence)\n  exp(sum(sapply(1:64, function(x) codon_counts[x]*log(ref_W[x]) ))/sum(codon_counts))\n} # W is a 64-long vector, frequency of a codon for its corresponding aa, in a reference set of sequences\n\nnumerate_aa = function(input_sequence){\n  codon_counts = count_codon(input_sequence)\n  res = rep(0,20)\n  # A\n  res[1] = codon_counts[37]+codon_counts[40]+codon_counts[38]+codon_counts[39]\n  # C\n  res[2] = codon_counts[58]+codon_counts[60]\n  # D\n  res[3] = codon_counts[34]+codon_counts[36]\n  # E\n  res[4] = codon_counts[33]+codon_counts[35]\n  # F\n  res[5] = codon_counts[62]+codon_counts[64]\n  # G\n  res[6] = codon_counts[41]+codon_counts[42]+codon_counts[43]+codon_counts[44]\n  # H\n  res[7] = codon_counts[18]+codon_counts[20]\n  # I\n  res[8] = codon_counts[13]+codon_counts[14]+codon_counts[16]\n  # K\n  res[9] = codon_counts[1]+codon_counts[3]\n  # L\n  res[10] = codon_counts[29]+codon_counts[32]+codon_counts[30]+codon_counts[31]+codon_counts[61]+codon_counts[63]\n  # M\n  res[11] = codon_counts[15]\n  # N\n  res[12] = codon_counts[2]+codon_counts[4]\n  # P\n  res[13] = codon_counts[21]+codon_counts[23]+codon_counts[22]+codon_counts[24]\n  # Q\n  res[14] = codon_counts[17]+codon_counts[19]\n  # R\n  res[15] = codon_counts[9]+codon_counts[11]+codon_counts[28]+codon_counts[26]+codon_counts[25]+codon_counts[27]\n  # S\n  res[16] = codon_counts[10]+codon_counts[12]+codon_counts[55]+codon_counts[56]+codon_counts[54]+codon_counts[53]\n  # T\n  res[17] = codon_counts[5]+codon_counts[6]+codon_counts[7]+codon_counts[8]\n  # V\n  res[18] = codon_counts[45]+codon_counts[46]+codon_counts[47]+codon_counts[48]\n  # W\n  res[19] = codon_counts[59]\n  # Y\n  res[20] = codon_counts[50]+codon_counts[52]\n  #stop codon\n  #res[49] = codon_counts[49]+codon_counts[51]+codon_counts[57]\n  return(res)\n} #number of occurrences of aa in a sequence, length of 20\n\nfreq_a = function(input_sequence){\n  codon_counts = count_codon(input_sequence)\n  res = list()\n  # A\n  res[[1]] = c(codon_counts[37],codon_counts[40],codon_counts[38],codon_counts[39])\n  # C\n  res[[2]] = c(codon_counts[58],codon_counts[60])\n  # D\n  res[[3]] = c(codon_counts[34],codon_counts[36])\n  # E\n  res[[4]] = c(codon_counts[33],codon_counts[35])\n  # F\n  res[[5]] = c(codon_counts[62],codon_counts[64])\n  # G\n  res[[6]] = c(codon_counts[41],codon_counts[42],codon_counts[43],codon_counts[44])\n  # H\n  res[[7]] = c(codon_counts[18],codon_counts[20])\n  # I\n  res[[8]] = c(codon_counts[13],codon_counts[14],codon_counts[16])\n  # K\n  res[[9]] = c(codon_counts[1],codon_counts[3])\n  # L\n  res[[10]] = c(codon_counts[29],codon_counts[32],codon_counts[30],codon_counts[31],codon_counts[61],codon_counts[63])\n  # M\n  res[[11]] = codon_counts[15]\n  # N\n  res[[12]] = c(codon_counts[2],codon_counts[4])\n  # P\n  res[[13]] = c(codon_counts[21],codon_counts[23],codon_counts[22],codon_counts[24])\n  # Q\n  res[[14]] = c(codon_counts[17],codon_counts[19])\n  # R\n  res[[15]] = c(codon_counts[9],codon_counts[11],codon_counts[28],codon_counts[26],codon_counts[25],codon_counts[27])\n  # S\n  res[[16]] = c(codon_counts[10],codon_counts[12],codon_counts[55],codon_counts[56],codon_counts[54],codon_counts[53])\n  # T\n  res[[17]] = c(codon_counts[5],codon_counts[6],codon_counts[7],codon_counts[8])\n  # V\n  res[[18]] = c(codon_counts[45],codon_counts[46],codon_counts[47],codon_counts[48])\n  # W\n  res[[19]] = codon_counts[59]\n  # Y\n  res[[20]] = c(codon_counts[50],codon_counts[52])\n  return(sapply(1:20, function(x) res[[x]]/sum(res[[x]])))\n}\n# 20-long list, each element represents an aa and has n length, n=degeneracy of that aa\n# each entry is the relaltive ratio of a codon for that aa\n\ncalculate_CUB = function(input_sequence, ref_a = fa_ref){\n  codon_counts = count_codon(input_sequence)\n  freqs64 = synonymous_usage_ratio(input_sequence)\n  fa = sapply(1:20, function(x) freqs64[pointers[[x]]])\n  dist_20aa = sapply(1:20, function(x) sum(abs(ref_a[[x]] - fa[[x]])))[-c(11,19)]\n  Fa = numerate_aa(input_sequence)/sum(numerate_aa(input_sequence))\n  Fa = Fa[-c(11,19)]\n  output = sum(Fa*dist_20aa)\n  return(output)\n}\n#range from 0-2\n\ncalculate_SCUO = function(input_sequence){\n  ha = function(a_set_freqs){ #freq of codons for the same aa\n    out = -sum(a_set_freqs*log(a_set_freqs))\n    return(out)\n  }\n  codon_counts = count_codon(input_sequence)\n  tmp2 = synonymous_usage_ratio(input_sequence)\n  tmp2[which(tmp2==0)] = 0.000001\n  Has = sapply(1:20, function(x) ha(tmp2[pointers[[x]]]))\n  ka = c(4,2,2,2,2,4,2,3,2,6,1,2,4,2,6,6,4,4,1,2)\n  max_Ha = log(ka)\n  Ea = sapply(1:20, function(x) (max_Ha[x]-Has[x])/max_Ha[x])[-c(11,19)]\n  Fa = (numerate_aa(input_sequence)/sum(numerate_aa(input_sequence)))[-c(11,19)]\n  return(sum(Ea*Fa))\n}\n\ncalculate_tAI = function(input_sequence, ref_w = wi){\n  codon_counts = count_codon(input_sequence)\n  return(exp(sum(codon_counts*log(ref_w))/sum(codon_counts)))\n}\n\ncalculate_ICDI = function(input_sequence){\n  codon_counts = count_codon(input_sequence)\n  ###\n  rac = function(input_sequence){\n    codon_counts = count_codon(input_sequence)\n    res = list()\n    # A\n    res[[1]] = c(codon_counts[37],codon_counts[40],codon_counts[38],codon_counts[39])\n    # C\n    res[[2]] = c(codon_counts[58],codon_counts[60])\n    # D\n    res[[3]] = c(codon_counts[34],codon_counts[36])\n    # E\n    res[[4]] = c(codon_counts[33],codon_counts[35])\n    # F\n    res[[5]] = c(codon_counts[62],codon_counts[64])\n    # G\n    res[[6]] = c(codon_counts[41],codon_counts[42],codon_counts[43],codon_counts[44])\n    # H\n    res[[7]] = c(codon_counts[18],codon_counts[20])\n    # I\n    res[[8]] = c(codon_counts[13],codon_counts[14],codon_counts[16])\n    # K\n    res[[9]] = c(codon_counts[1],codon_counts[3])\n    # L\n    res[[10]] = c(codon_counts[29],codon_counts[32],codon_counts[30],codon_counts[31],codon_counts[61],codon_counts[63])\n    # M\n    res[[11]] = codon_counts[15]\n    # N\n    res[[12]] = c(codon_counts[2],codon_counts[4])\n    # P\n    res[[13]] = c(codon_counts[21],codon_counts[23],codon_counts[22],codon_counts[24])\n    # Q\n    res[[14]] = c(codon_counts[17],codon_counts[19])\n    # R\n    res[[15]] = c(codon_counts[9],codon_counts[11],codon_counts[28],codon_counts[26],codon_counts[25],codon_counts[27])\n    # S\n    res[[16]] = c(codon_counts[10],codon_counts[12],codon_counts[55],codon_counts[56],codon_counts[54],codon_counts[53])\n    # T\n    res[[17]] = c(codon_counts[5],codon_counts[6],codon_counts[7],codon_counts[8])\n    # V\n    res[[18]] = c(codon_counts[45],codon_counts[46],codon_counts[47],codon_counts[48])\n    # W\n    res[[19]] = codon_counts[59]\n    # Y\n    res[[20]] = c(codon_counts[50],codon_counts[52])\n    fa2 = sapply(1:20,function(x) sum(res[[x]])/length(res[[x]]))\n    return(sapply(1:20,function(x) res[[x]]/fa2[x]))\n  }\n  ###\n  r = rac(input_sequence)\n  r1 = sapply(1:20, function(x) sum((r[[x]]-1)^2))\n  r1 = r1[-c(11,19)]\n  kaa = 1/(ka^2 - ka)\n  kaa = kaa[-c(11,19)]\n  sa = kaa*r1\n  sa = sa[which(is.na(sa) == F)]\n  return(mean(sa))\n}\n\ncalculate_CF = function(substituted_nucleotide, substituted_position, original_sequence){\n  substituted_sequence = original_sequence\n  substr(substituted_sequence, start =substituted_position, stop=substituted_position) <- substituted_nucleotide\n  original_codon_counts = count_codon(original_sequence)\n  substituted_codon_counts = count_codon(substituted_sequence)\n  tf = sapply(1:21, function(x) which(codons == OC) %in% pointers[[x]])\n  IND = which(tf == T)\n  syn_codons = codons[pointers[[IND]]]\n  total_n = as.numeric(sum(original_codon_counts[which(codons %in% syn_codons)]))\n  freq_oc_before = as.numeric(original_codon_counts[which(codons == OC)])/total_n\n  freq_sc_before = as.numeric(original_codon_counts[which(codons == SC)])/total_n\n  freq_oc_after = as.numeric(substituted_codon_counts[which(codons == OC)])/total_n\n  freq_sc_after = as.numeric(substituted_codon_counts[which(codons == SC)])/total_n\n  out = abs(freq_oc_before - freq_oc_after) + abs(freq_sc_before - freq_sc_after)\n  return(out)\n}# CF:change of codon frequency between original and substitute codon\n\n\ncalculate_FracOpt = function(input_sequence){\n  codon_counts = count_codon(input_sequence)\n  res = sum(codon_counts[index_for_opt_codon])/sum(codon_counts)\n  return(res)\n}\n\n\nfind_which_aa_by_codon = function(CODON){\n  `%notin%` <- Negate(`%in%`)\n  if(CODON %notin% codons){\n    stop('input should be a DNA codon')\n  }\n  tf = sapply(1:21, function(x) CODON %in% aa_codon_list21[[x]])\n  ind = which(tf == T)\n  return(attributes(aa_codon_list21)[[1]][ind])\n}\n\n\ncalculate_CAM = function(substituted_nucleotide, substituted_position, original_sequence){\n    calc_one_part = function(x, y, pos_x, pos_y){\n      res = ifelse(x == y, 1, 0)/abs(pos_x - pos_y)\n      return(res)\n    }\n    ###\n    substituted_sequence = original_sequence\n    substr(substituted_sequence, start =substituted_position, stop=substituted_position) <- substituted_nucleotide\n    n_th_codon_sub = ceiling(substituted_position/3)\n    n = nchar(original_sequence)\n    orig_seq_split = substring(original_sequence, seq(1, n-2, 3), seq(3, n, 3))\n    sub_seq_split = substring(substituted_sequence, seq(1, n-2, 3), seq(3, n, 3))\n    if(orig_seq_split[n_th_codon_sub] %in% c(\"TAA\",\"TAG\",\"TGA\")){\n      return(10)\n    } else {\n      if(find_which_aa_by_codon(orig_seq_split[n_th_codon_sub]) != find_which_aa_by_codon(sub_seq_split[n_th_codon_sub])){\n        warning('it is not a synonymous mutation')\n      }\n      aa_seq = sapply(1:length(orig_seq_split),\n                      function(x) find_which_aa_by_codon(orig_seq_split[x]))\n      the_aa = find_which_aa_by_codon(orig_seq_split[n_th_codon_sub])\n      pos_with_same_aa = which(aa_seq == the_aa)\n      if (length(which(aa_seq == the_aa)) ==1) {\n        return(0)\n      } else if(n_th_codon_sub == min(pos_with_same_aa)){\n        pos_after = sort(pos_with_same_aa[which(pos_with_same_aa > n_th_codon_sub)])\n        nearest_pos_after = pos_after[1]\n        res = calc_one_part(sub_seq_split[n_th_codon_sub], sub_seq_split[nearest_pos_after],\n                            n_th_codon_sub, nearest_pos_after)-\n          calc_one_part(orig_seq_split[n_th_codon_sub], orig_seq_split[nearest_pos_after],\n                        n_th_codon_sub, nearest_pos_after)\n        return(res)\n      } else if (n_th_codon_sub == max(pos_with_same_aa)) {\n        pos_previous = sort(pos_with_same_aa[which(pos_with_same_aa < n_th_codon_sub)])\n        nearest_pos_previous = pos_previous[length(pos_previous)]\n        res = calc_one_part(sub_seq_split[n_th_codon_sub], sub_seq_split[nearest_pos_previous],\n                            n_th_codon_sub, nearest_pos_previous)-\n          calc_one_part(orig_seq_split[n_th_codon_sub], orig_seq_split[nearest_pos_previous],\n                        n_th_codon_sub, nearest_pos_previous)\n        return(res)\n      } else {\n        pos_previous = sort(pos_with_same_aa[which(pos_with_same_aa < n_th_codon_sub)])\n        nearest_pos_previous = pos_previous[length(pos_previous)]\n        pos_after = sort(pos_with_same_aa[which(pos_with_same_aa > n_th_codon_sub)])\n        nearest_pos_after = pos_after[1]\n        res = calc_one_part(sub_seq_split[n_th_codon_sub], sub_seq_split[nearest_pos_after],\n                            n_th_codon_sub, nearest_pos_after) +\n          calc_one_part(sub_seq_split[n_th_codon_sub], sub_seq_split[nearest_pos_previous],\n                        n_th_codon_sub, nearest_pos_previous) -\n          calc_one_part(orig_seq_split[n_th_codon_sub], orig_seq_split[nearest_pos_after],\n                        n_th_codon_sub, nearest_pos_after) -\n          calc_one_part(orig_seq_split[n_th_codon_sub], orig_seq_split[nearest_pos_previous],\n                        n_th_codon_sub, nearest_pos_previous)\n        return(res)\n      }\n    }\n}\n\n######## build #########\nlibrary(devtools)\nlibrary(roxygen2)\n\nuse_data(fa_ref, which_codon_opt, W, pointers, codon_usage_prob, aa_codon_list21,\n         aa_list18, ka, wi, index_for_opt_codon, codons_except_stop, codons, internal = TRUE, overwrite = TRUE)\n\n\n### also, add 'stringr' to 'Depends' in 'DESCRIPTION' file\n\n#######################\n\n\n\n\nlibrary(codonBiasMetrics)\ntmp = generate_a_sequence(30)\nnchar(tmp) #\ncalculate_CAI(tmp)\ncalculate_CUB(tmp)\ncalculate_FracOpt(tmp)\ncalculate_ICDI(tmp)\ncalculate_SCUO(tmp)\ncalculate_tAI(tmp)\n\n\ncalculate_CF('C', 7, tmp)\ncalculate_CAM('C', 7, tmp)\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1599152669188.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "37|40|44|0|\n46|39|124|0|\n126|50|212|0|\n214|36|303|0|\n305|37|395|0|\n",
    "hash" : "2758463658",
    "id" : "EB7EB6C",
    "lastKnownWriteTime" : 1599155061,
    "last_content_update" : 1599155195736,
    "path" : "~/Desktop/build_codon_bias_package.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}